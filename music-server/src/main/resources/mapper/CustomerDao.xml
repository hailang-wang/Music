<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.njupt.dao.CustomerDao">
    <!-- <select id="selectBlog" resultType="Blog">
 select * from Blog where id = #{id}
    </select>-->

    <!--因为下面写了，所以上面这个可以注释了，
        下面是自己要写入的sql语句
        id:你要执行的sql语法的唯一标识，mybatis会使用这个id的值来找到要执行的sql语句，要求使用接口中的方法名称
        resultType：表示结果类型的，是sql语句执行后得到的ResultSet，遍历这个ResultSet得到的Java对象的类型
        值写的是类型的权限的名称

    -->
    <resultMap id="result" type="com.njupt.entity.Customer">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="phone_num" property="phoneNum" jdbcType="CHAR"/>
        <result column="email" property="email" jdbcType="CHAR"/>
        <result column="birth" property="birth" jdbcType="TIMESTAMP"/>
        <result column="introduction" property="introduction" jdbcType="VARCHAR"/>
        <result column="location" property="location" jdbcType="VARCHAR"/>
        <result column="avator" property="avator" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="queryAll" resultMap="result">
            select * from consumer
    </select>
    <select id="queryMan" resultType="java.lang.Integer">
        select count(sex) from consumer where sex=0
    </select>
    
    
    
    <delete id="deleteById">
        delete from consumer where id=#{0}
    </delete>
    
    <update id="update">
        update consumer
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="phoneNum != null">
                phone_num = #{phoneNum,jdbcType=CHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=CHAR},
            </if>
            <if test="birth != null">
                birth = #{birth,jdbcType=TIMESTAMP},
            </if>
            <if test="introduction != null">
                introduction = #{introduction,jdbcType=VARCHAR},
            </if>
            <if test="location != null">
                location = #{location,jdbcType=VARCHAR},
            </if>
            <if test="avator != null">
                avator = #{avator,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id=#{id}
    </update>

    <select id="login" resultType="com.njupt.entity.Customer">
        select * from consumer where username=#{0} and password=#{1}
    </select>

    <!--根据电话和用户名，返回给后台，获取密码参数来返还给用户，找回密码操作-->
    <select id="verify" resultType="com.njupt.entity.Customer">
        select * from consumer where username=#{0} and phone_num=#{1}
    </select>


</mapper>

        <!--
   解释上面的内容：
        作用：sql的映射文件，写sql语句的，mybatis会自动执行
            1指定约束文件<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">称为指定约束文件
        mybatis-3-mapper.dtd使约束文件的名称，扩展名是dtd的
            2约束文件的作用：限制，检查在当前文件中出现的标签，属性必须是符合mybatis的要求的
            3mapper
        是当前文件的跟标签，必须的
        namespace：叫做命名空间，唯一值的，可以自由定义字符串，但是要求，必须使用dao接口的全限定名称
        com.njupt.dao.StudentDao
            4select
        在当前文件中，可以使用特定的标签表示数据库的特定操作
        <select>:表示执行查询select语句
        <update>:表示更新数据库的操作，就是在《update》标签中，写的是update sql语句
        <insert>:表示插入，insert语句
        <delete>:表示删除，执行的是delete语句

-->